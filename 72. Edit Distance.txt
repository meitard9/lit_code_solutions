72. Edit Distance
Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.

class Solution {
    /*public int minDistance(String word1, String word2) {
        //https://web.stanford.edu/class/cs124/lec/med.pdf
        int n = word1.length();
        int m = word2.length();
        int[][] editDist = new int[n+1][m+1];

        for(int i = 0; i < n+1; i++){
            editDist[i][0] = i;
        }
        
        for(int i = 0; i < m+1; i++){
            editDist[0][i] = i;
        }

        for(int i = 1; i < n+1; i++){
            for(int j = 1; j < m+1; j++){
                editDist[i][j] = Math.min(editDist[i-1][j-1] + (word1.charAt(i-1) == word2.charAt(j-1)? 0 : 1)
                                            ,Math.min(editDist[i][j-1] + 1, editDist[i-1][j] + 1));
            }
        }
        return editDist[n][m];
    }*/

    public int minDistance(String word1, String word2) {
        
        int n = word1.length();
        int m = word2.length();
        int[][] dp = new int[n][m];

        return solve(word1, word2, n, m, dp);
    }

    public int solve(String word1, String word2, int n, int m, int[][] dp){
        if(n == 0) return m;
        if(m == 0) return n;

        if(dp[n-1][m-1] != 0) return dp[n-1][m-1];

        if(word1.charAt(n-1) == word2.charAt(m-1)) 
            return dp[n-1][m-1] = solve(word1, word2, n-1, m-1, dp);
        return dp[n-1][m-1] = 1 + Math.min(solve(word1, word2, n-1, m-1, dp), Math.min(solve(word1, word2, n-1, m, dp), solve(word1, word2, n, m-1, dp)));
    }
}