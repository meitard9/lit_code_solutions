401. Binary Watch

A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.
Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.

The hour must not contain a leading zero.

For example, "01:00" is not valid. It should be "1:00".
The minute must consist of two digits and may contain a leading zero.

For example, "10:2" is not valid. It should be "10:02".
 

Example 1:

Input: turnedOn = 1
Output: ["0:01","0:02","0:04","0:08","0:16","0:32","1:00","2:00","4:00","8:00"]
Example 2:

Input: turnedOn = 9
Output: []
 

Constraints:

0 <= turnedOn <= 10

class Solution {
    int hLen = 4;
     int mLen = 6;
    int maxTurnedOn =10;
    boolean isInitialized = false;
    //Initialize zero list
    List<Integer> zeroList = List.of(0);
    int[] sumUntilI = {0,1,3,6,10,15};
    HashMap<Integer,List<Integer>> bins = new HashMap<Integer,List<Integer>>();
    public List<String> readBinaryWatch(int turnedOn) {
        if(turnedOn>=9) return new LinkedList<String>();
        if(!isInitialized)
            initialize();
        List<String> ans = new LinkedList<String>();

        int i = turnedOn<=6? 0 :turnedOn-6 ;
        //all the combination such that h + m = turnedOn;
        while(i<=4&i<=turnedOn){
            int h = i ;
            int m = turnedOn-i;
            ans = Stream.concat(ans.stream()
                                ,addAllCombination(h,m).stream()
                                ).toList();
            i++;
        }
        return ans;
    }

    //requires 0<=hOnes<=4 , 0<=mOnes<=6
    public List<String> addAllCombination(int hOnes, int mOnes){
        List<Integer> hList= possibleBinarie(hOnes,hLen);
        List<Integer> mList= possibleBinarie(mOnes,mLen);
        List<String> ans = new LinkedList<String>();
        for(int h:hList){
            for(int m:mList){
                if(m<=59&&h<=11)
                    ans.add(printTime(h,m));
            }
        }
        return ans;
    }
    public List<Integer> possibleBinarie(int numsOfOnes, int length){
        return getBins(numsOfOnes , length);
    }

    /**
     * memorization
     *             n
     *      0 1 2 3 4 5 6
     *    0
     *  l 1
     *    2
     *    3
     *    4
     *    5
     *    6
     * every cell is a list of all the possible binaries of length = l and the number of the ones is n; (==f(n,l));
     */
    public void initialize(){
        for(int l=1;l<=6;l++){
            for(int n=1;n<=6;n++){
                List<Integer> combinedList;
                if (n==1&l==1) {//special case
                    combinedList = List.of(1);
                } else if (n==l) {//diagonal
                    combinedList = List.of((int)Math.pow(2,n)-1);
                } else {
                    /** l>=n:
                     *  f(n,l)={0 + 2f(n,l-1)}
                     *          U  (==union)
                     *        ={1 + 2f(n-1,l-1)}
                     *  n==l: (diagonal)
                     *      f(n,l) ={ 2^n -1};
                     *  n<l:
                     *      the number of ones cant be bigger then the length so:
                     *      f(n,l) = {0};
                     *  n==1==l:
                     *      f(1,1) = {1}; if not a spacial case then it will be {0,1}
                     *        */
                    combinedList = Stream.concat(
                                    getBins(n, l - 1).stream().map(i -> i * 2)
                                    , getBins(n - 1, l - 1).stream().map(i -> (i * 2) + 1))
                            .toList();
                }
                bins.put(sumUntilI[l-1]+n,combinedList);
            }
        }
        isInitialized = true;
    }

    /**
     *
     *             n
     *      0 1 2 3 4 5 6
     *    0 0 0 0 ..    0
     *  l 1 0 1         .
     *    2 0 2 3       .
     *    3   4 5 6     .
     *    4   7 8 9 10  .
     *    5     ...     0
     *    6             21
     *    position(n,l) = [sum from 1 until l-1 == (1+2+...+l-1)] + n;
     */
    public List<Integer> getBins(int n, int l){
        if(n==0||l==0||n>l)
            return zeroList;
        else return bins.get(sumUntilI[l-1]+n);
    }
    public String printTime(int h, int m){
        StringBuilder sb = new StringBuilder();
        sb.append(h);
        sb.append(":");
        if(m<10)
            sb.append("0");
        sb.append(m);
        return sb.toString();
    }

}