97. Interleaving String
Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m 
substrings
 respectively, such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = "aa" + "bc" + "c", and s2 into s2 = "dbbc" + "a".
Interleaving the two splits, we get "aa" + "dbbc" + "bc" + "a" + "c" = "aadbbcbcac".
Since s3 can be obtained by interleaving s1 and s2, we return true.
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true
 

Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.
 

Follow up: Could you solve it using only O(s2.length) additional memory space?

class Solution {
    int n;
    int m;
    char[] c1;
    char[] c2;
    char[] c3;
    Boolean[][] memo;
    public boolean isInterleave(String s1, String s2, String s3) {
        n = s1.length();
        m = s2.length();
        if(m + n != s3.length())
            return false;
        if(n == 0)
            return s2.equals(s3);
        if(m == 0)
            return s1.equals(s3);
        
        memo = new Boolean[n+1][m+1];
        c1 = s1.toCharArray();
        c2 = s2.toCharArray();
        c3 = s3.toCharArray();
        return iterHelper1dConst();//iterHelper1d();//helper(0,0);//iterHelper();
    }

    //2D -- Recursive + memorazation
    public boolean helper(int i, int j){
        if(i==n&j==m)
            return true;
        
        if(memo[i][j] != null)//all ready calculated
            return memo[i][j];
        
        memo[i][j] = i<n && (helper(i+1, j) && c1[i] == c3[i+j]) ||
                     j<m && (helper(i, j+1) && c2[j] == c3[i+j]);

        return memo[i][j];   
    }

    //2D -- Iterative + memorazation
    public boolean iterHelper(){
       memo[n][m]=true;
        for(int i = n - 1; i >= 0; i--){
            memo[i][m] = memo[i+1][m] && c1[i] == c3[i+m];
        }

        for(int j = m - 1; j >= 0; j--){
            memo[n][j] = memo[n][j+1] && c2[j] == c3[n+j];
        }
        

        for(int i = n - 1; i >= 0; i--){
            for(int j = m - 1; j >= 0; j--){
                memo[i][j] = (memo[i+1][j] && c1[i] == c3[i+j]) ||
                             (memo[i][j+1] && c2[j] == c3[i+j]);
            }
        }
        return memo[0][0];
    }
    //1D -- Iterative + memorazatio
    public boolean iterHelper1d(){
        boolean[] dp = new boolean[m + 1];
        dp[0] = true;

        for (int i = 1; i <= m; ++i) {
            dp[i] = dp[i - 1] && c2[i - 1] == c3[i - 1];
        }

        for (int i = 1; i <= n; ++i) {
            dp[0] = dp[0] && c1[i - 1] == c3[i - 1];
            for (int j = 1; j <= m; ++j) {
                dp[j] = (dp[j] && c1[i - 1] == c3[i + j - 1]) || (dp[j - 1] && c2[j - 1] == c3[i + j - 1]);
            }
        }
        
        return dp[m];
    }


    //dp constant space
    public boolean iterHelper1dConst(){
        boolean[] dp = new boolean[m + 1];
        dp[0] = true;

        for (int i = 1; i <= m; i++) {
            dp[i] = dp[i - 1] && c2[i - 1] == c3[i - 1];
        }

        for (int i = 1; i <= n; i++) {
            dp[0] = dp[0] && c1[i - 1] == c3[i - 1];
            for (int j = 1; j <= m; j++) {
                dp[j] = (dp[j] && c1[i - 1] == c3[i + j - 1]) || (dp[j - 1] && c2[j - 1] == c3[i + j - 1]);
            }
        }
        
        return dp[m];
    }
}