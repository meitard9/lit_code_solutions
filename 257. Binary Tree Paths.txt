257. Binary Tree Paths

Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.

Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]
Example 2:

Input: root = [1]
Output: ["1"]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<String>();
        if(root==null) return list;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        HashSet<TreeNode> visited = new HashSet<>();
        //stack.push(root);
        TreeNode curr= root;
        // TreeNode lastVisited =null;

        while(!stack.isEmpty()||curr== root) {
            //visited.add(curr);
            //stack.push(curr);
            if(curr.left!=null || curr.right != null){
                if(curr.left!=null & !visited.contains(curr.left)){
                    stack.push(curr);
                    visited.add(curr);
                    curr=curr.left;
                }
                else if(curr.right!=null & !visited.contains(curr.right)){
                    stack.push(curr);
                    visited.add(curr);
                    curr=curr.right;
                }
                else{//
                    if(!stack.isEmpty())curr=stack.pop();
                    else break;
                }
            }
            else{//is leaf
                list.add(printStack(stack,curr));
                visited.add(curr);
                if(!stack.isEmpty())curr=stack.pop();
                else break;
            }
        }
        return list;
    }
    public String printStack(Stack<TreeNode> stack,TreeNode curr){ 
        if(stack.isEmpty()) return Integer.toString(curr.val);
        StringBuilder sb = new StringBuilder();
        Stack<TreeNode> tempStack = new Stack<>();
        
        while(!stack.isEmpty()){
            tempStack.push(stack.pop());
        }

        TreeNode pop = tempStack.pop();
        stack.push(pop);
        sb.append(Integer.toString(pop.val));
        while(!tempStack.isEmpty()){
            sb.append("->");
            pop = tempStack.pop();
            stack.push(pop);
            sb.append(Integer.toString(pop.val));
           
        }
        sb.append("->");
        sb.append(Integer.toString(curr.val));
        return sb.toString();
    }
    
}