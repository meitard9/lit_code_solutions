Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown



class Solution {
    public List<List<Integer>> generate(int numRows) {
        //initialize -ArrayList cause we do alot of "get" and "set".
        List<List<Integer>> pascal = new ArrayList<List<Integer>>();
        for(int n=0;n<numRows;n++){
            List<Integer> rowN=new ArrayList<Integer>();
            for(int k=0;k<=n;k++){
                if(k==0||k==n)
                    rowN.add(1);
                else
                    rowN.add(pascal.get(n-1).get(k)+pascal.get(n-1).get(k-1));
            }
           pascal.add(rowN);
        }
        return pascal; 
    }
    //even with nCooseK its work only untill n<19
    public List<List<Integer>> generate2(int numRows) {
        //initialize cause we do alot of "add"".
        List<List<Integer>> pascal = new LinkedList<List<Integer>>();
        //int n=13;
        for(int n=0;n<numRows;n++){
            List<Integer> rowN=new LinkedList<Integer>();
            for(int k=0;k<=n;k++){
                rowN.add(nChooseK2(n,k));
            }
           pascal.add(rowN);
        }
        return pascal; 
    }
    //can work only for n<13
    public int nChooseK(int n,int k){
        //if(k>n)->error
        if(k==0||n==k) return 1;
        else if(k==1||(n-k)==1) return n;
        else
        return fact(n)/(fact(k)*fact(n-k));
    }
    //when n>12 then fact(n)>max_INT = 2^32
    public int fact(int n) {
        if(n==1|n==0) return 1;
        int facti=1;
        for(int i=2;i<=n;i++){
            facti*=i;
        }
        return facti;
    }
    public int nChooseK2(int n,int k){
        //if(k>n)->error
        if(k==0||n==k) return 1;
        if(k==1||(n-k)==1) return n;
        //return fact(n)/(fact(k)*fact(n-k));
        int cut,other;
        if(k>n/2) cut=k; 
        else cut = n-k;
        other =n-cut;
        int mul=1;
        for(int i=cut+1;i<=n;i++){
            mul*=i;
        }
        return mul/fact(other);
    }
}