594. Longest Harmonious Subsequence
We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.

A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].
Example 2:

Input: nums = [1,2,3,4]
Output: 2
Example 3:

Input: nums = [1,1,1,1]
Output: 0
 

Constraints:

1 <= nums.length <= 2 * 104
-109 <= nums[i] <= 109

class Solution {
    public int findLHS(int[] nums) {
        //first map every unique "key" and count his time of apperanse
        Map<Integer,Integer> numTimes = new HashMap<Integer,Integer>();
        for(int key: nums){
            numTimes.put(key ,numTimes.containsKey(key) ? numTimes.get(key) + 1 : 1);    
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : numTimes.entrySet()) {
            int curr = entry.getValue();
            int successor = entry.getKey() + 1;
            if(numTimes.containsKey(successor)){
                curr += numTimes.get(successor);

            if(curr > max)
                max = curr; 
            }
        }
        return max;

    }
}

//with sort
class Solution {
    public int findLHS(int[] nums) {
        Arrays.sort(nums);
        int left = 0;
        int right = 1;
        int result = 0;
        while(right < nums.length){
            int diff = nums[right] - nums[left];
            if(diff == 1){
                result = Math.max(result, right - left + 1);
            }

            if(diff <= 1){
                right++;
            }else{
                left++;
            }
        }
        return result;
    }
}

//with huristic
class Solution {

    public int findLHS(int[] nums) {

        int max = nums[0];

        int min = nums[0];

        for(int num : nums) {

            max = Math.max(max, num);

            min = Math.min(min, num);

        }

        int range = max-min+1;

        int maxLen = 0;

        if(range > 10*nums.length) {

            Map<Integer, Integer> numCnt = new HashMap<>();

            

            for(int num : nums) {

                numCnt.put(num, numCnt.getOrDefault(num, 0) + 1);

            }



            for(int key : numCnt.keySet()) {

                if(!numCnt.containsKey(key+1)) continue;

                maxLen = Math.max(maxLen, numCnt.get(key) + numCnt.get(key+1));

            }

        } else {

            int[] cnt = new int[range]; 

            for(int num : nums) {

                cnt[num-min]++;

            }



            for(int i = 1; i < range; i++) {

                if(cnt[i] == 0 || cnt[i-1] == 0) continue; 

                maxLen = Math.max(maxLen, cnt[i-1] + cnt[i]);

            }

        }





        return maxLen;

    }

}