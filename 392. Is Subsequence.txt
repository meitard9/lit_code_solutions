392. Is Subsequence

Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abc", t = "ahbgdc"
Output: true
Example 2:

Input: s = "axc", t = "ahbgdc"
Output: false
 

Constraints:

0 <= s.length <= 100
0 <= t.length <= 104
s and t consist only of lowercase English letters.
 

Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?


class Solution {
    public boolean isSubsequence(String s, String t) {
        //extreme cases;
        int slen=s.length();
        if(slen==0) return true;
        int tlen=t.length();
        if(slen>tlen) return false;

        //array - because there alot of get and set calls;
        char[] sArray = s.toCharArray();
        char[] tArray = t.toCharArray();
        int j=0;
        int i=0;
        while(i<slen-1){
            char si = sArray[i];
            while(j<tlen){
                if(sArray[i]==tArray[j]){
                    j++;
                    break;
                    
                }
                j++;
            }
            i++;
        }
        //check the last is s;
        //i==s.length()-1;
        while(j<tlen){
            if(sArray[i]==tArray[j])
                return true;
            j++;
        }
        return false;

    }
}