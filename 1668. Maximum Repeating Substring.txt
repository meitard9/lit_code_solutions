1668. Maximum Repeating Substring

For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.

Given strings sequence and word, return the maximum k-repeating value of word in sequence.

 

Example 1:

Input: sequence = "ababc", word = "ab"
Output: 2
Explanation: "abab" is a substring in "ababc".
Example 2:

Input: sequence = "ababc", word = "ba"
Output: 1
Explanation: "ba" is a substring in "ababc". "baba" is not a substring in "ababc".
Example 3:

Input: sequence = "ababc", word = "ac"
Output: 0
Explanation: "ac" is not a substring in "ababc". 
 

Constraints:

1 <= sequence.length <= 100
1 <= word.length <= 100
sequence and word contains only lowercase English letters.


class Solution {
    int[] dp;
    public int maxRepeating(String sequence, String word) {
        dp = new int[sequence.length() + 1];
        //dp[dp.length - 1] = 1;

        KMPSearch(word, sequence);

        int max = 0;
        int curr = 0;
        int M = word.length();
        int j = dp.length - 1;
        while(j >= 0 && dp[j] != 1){
            j--;
        }j++;

        for(int i = sequence.length() - M; i >= 0; i--){
            if(dp[i] == 1 ){
                if(dp[i + M] >= 1){
                    dp[i] = 1 + dp[i + M];
                }
                if(dp[i] > max){
                        max = dp[i];
                    }
                
            }
        }



        return max;
    }

 
    // Fills lps[] for given pattern pat
    public void computeLPSArray(String pat, int M, int[] lps)
    {
        // Length of the previous longest prefix suffix
        int len = 0;
      
        // lps[0] is always 0
        lps[0] = 0;

        // Loop calculates lps[i] for i = 1 to M-1
        int i = 1;
        while (i < M) {
            if (pat.charAt(i) == pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            }
            else {
                if (len != 0) {
                    len = lps[len - 1];
                }
                else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
    }

    // Prints occurrences of pat in txt
    public void KMPSearch(String pat, String txt)
    {
        int M = pat.length();
        int N = txt.length();
        /*int max = 0;
        int curr = 0;
        int prev = - 1;
        int num = 0;*/

        // Create lps[] that will hold the longest prefix
        // suffix values for pattern
        int[] lps = new int[M];
        List<Integer> result = new ArrayList<>();

        // Preprocess the pattern (calculate lps[] array)
        computeLPSArray(pat, M, lps);

        int i = 0; // index for txt
        int j = 0; // index for pat
        while ((N - i) >= (M - j)) {
            if (pat.charAt(j) == txt.charAt(i)) {
                j++;
                i++;
            }

            if (j == M) {
                int index = i - j + 1;
                /*num = num + index;
                if(prev == -1){
                    curr = 1;
                }
                else{
                    if(index - prev == M){
                        curr++;
                    }
                    else{
                        max = Math.max(max, curr);
                        curr = 1;
                    }
                }
                prev = index;*/
                dp[index - 1] = 1;
                    
                //result.add(i - j + 1);

                j = lps[j - 1];
            }
            else if (i < N
                     && pat.charAt(j) != txt.charAt(i)) {
                if (j != 0) {
                    j = lps[j - 1];
                }
                else {
                    i = i + 1;
                }
            }
        }
        //return Math.max(max, curr);
    }




}

class Solution {
    public int maxRepeating(String sequence, String word) {
        StringBuilder builder = new StringBuilder();
        int max = 0;
        while (builder.length() < sequence.length()) {
          builder.append(word);
          if (sequence.contains(builder.toString())) {
              max++;
          } else {
            break;
          }
        }
        return max;
    }
}