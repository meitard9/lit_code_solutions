45. Jump Game II

You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
 

Constraints:

1 <= nums.length <= 104
0 <= nums[i] <= 1000
It's guaranteed that you can reach nums[n - 1].

class Solution {
    public int jump(int[] nums) {
        int[] dp = new int[nums.length];
        int len = nums.length;
        for(int i = len - 2; i >= 0 ; i--){
            int j = nums[i];
            //if(j != 0){
                if(i + j >= len - 1){
                    dp[i] = 1;
                }
                else{
                    dp[i] = 1 + minJump(i,j,dp);
                }
            //}
            //else{
               // dp[i] = Integer.MAX_VALUE;
           // }
        }
        return dp[0];
    }
    public int minJump(int i, int j, int[] dp){
        int min = Integer.MAX_VALUE;
        int k = i + j;
        while(k > i){
            if(dp[k] != 0)
            min = Math.min(min ,dp[k]);
            k--;
        }
        if(min == Integer.MAX_VALUE)
        return -1;
        return min;
    }
}



class Solution {
    int ans = 0;

    public int jump(int[] nums) {
        int i = 0;
        while (i < nums.length - 1) {
            i = helper(i, nums[i], nums);

        }
        return ans;
    }

    public int helper(int a, int b, int[] nums) {
        ans++;
        if (a + b >= nums.length - 1) {
            return nums.length;
        }
        int max = 0;
        int temp = 0;
        for (int i = a; i <= a + b; i++) {
            if (nums[i] + i >= max) {
                temp = i;
                max = nums[i] + i;
            }
        }
        return temp;
    }
}