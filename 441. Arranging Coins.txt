441. Arranging Coins

You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.

Given the integer n, return the number of complete rows of the staircase you will build.

 

Example 1:


Input: n = 5
Output: 2
Explanation: Because the 3rd row is incomplete, we return 2.
Example 2:


Input: n = 8
Output: 3
Explanation: Because the 4th row is incomplete, we return 3.
 

Constraints:

1 <= n <= 231 - 1

class Solution {
    public int arrangeCoins(int n) {
        /**
        a1=1;
        d=1;
        an=a1+(n-1)d = 1 +1*(n-1) = n;
        Sn=(a1+an)*n/2 = (1+n)*n/2;
        0 = n^2 + n - 2*Sn;
        ... n = [sqrt(8*Sn+1)-1]/2;
        
         */
        //return (int)(Math.sqrt(2 * (long)n + 0.25) - 0.5); // cast "n" to "long" to avoid integer overflow
        return (int)(-1 + (Math.sqrt(1 + 8 * (long)n )))/2; // cast "n" to "long" to avoid integer overflow
    }
}