145. Binary Tree Postorder Traversal
Given the root of a binary tree, return the postorder traversal of its nodes' values.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        if(root==null) return list;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        TreeNode curr= root;

        while(!stack.isEmpty()) {
            if(!(curr.left==null && curr.right == null)){
                stack.push(curr);
                if(curr.left!=null) curr=curr.left; 
                else{
                    curr=curr.right;
                }
            }
            else{//is leaf
                list.add(curr.val);
                TreeNode father =stack.pop();
                if(father.left==curr) father.left=null;
                else father.right=null;
                curr=father;
            } 
        }
        return list;     // Return the solution list...
    }
}